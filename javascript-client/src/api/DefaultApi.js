/**
 * Correios API
 * API para acessar web services dos correios
 *
 * OpenAPI spec version: 0.0.3
 * Contact: amadeu01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.CorreiosApi) {
      root.CorreiosApi = {};
    }
    root.CorreiosApi.DefaultApi = factory(root.CorreiosApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 0.0.3
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the calcPrazoDataGet operation.
     * @callback module:api/DefaultApi~calcPrazoDataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param {Object} opts Optional parameters
     * @param {Date} opts.sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrazoDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrazoDataGet = function(nCdServico, sCepOrigem, sCepDestino, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrazoDataGet");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrazoDataGet");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrazoDataGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'sDtCalculo': opts['sDtCalculo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrazoData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrazoDataPost operation.
     * @callback module:api/DefaultApi~calcPrazoDataPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} opts.sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param {Date} opts.sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrazoDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrazoDataPost = function(nCdServico, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrazoDataPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'nCdServico': nCdServico,
        'sCepOrigem': opts['sCepOrigem'],
        'sCepDestino': opts['sCepDestino'],
        'sDtCalculo': opts['sDtCalculo']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrazoData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrazoGet operation.
     * @callback module:api/DefaultApi~calcPrazoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calcula prazo para entrega
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} opts.sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {module:api/DefaultApi~calcPrazoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrazoGet = function(nCdServico, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrazoGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nCdServico': nCdServico,
        'sCepOrigem': opts['sCepOrigem'],
        'sCepDestino': opts['sCepDestino']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrazo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrazoPost operation.
     * @callback module:api/DefaultApi~calcPrazoPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calcula prazo para entrega
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} opts.sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {module:api/DefaultApi~calcPrazoPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrazoPost = function(nCdServico, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrazoPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'nCdServico': nCdServico,
        'sCepOrigem': opts['sCepOrigem'],
        'sCepDestino': opts['sCepDestino']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrazo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrazoRestricaoGet operation.
     * @callback module:api/DefaultApi~calcPrazoRestricaoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calcula Praza Prazo com Restrição
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} opts.sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param {Date} opts.sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrazoRestricaoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrazoRestricaoGet = function(nCdServico, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrazoRestricaoGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nCdServico': nCdServico,
        'sCepOrigem': opts['sCepOrigem'],
        'sCepDestino': opts['sCepDestino'],
        'sDtCalculo': opts['sDtCalculo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrazoRestricao', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrazoRestricaoPost operation.
     * @callback module:api/DefaultApi~calcPrazoRestricaoPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} opts.sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param {Date} opts.sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrazoRestricaoPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrazoRestricaoPost = function(nCdServico, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrazoRestricaoPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'nCdServico': nCdServico,
        'sCepOrigem': opts['sCepOrigem'],
        'sCepDestino': opts['sCepDestino'],
        'sDtCalculo': opts['sDtCalculo']
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrazoRestricao', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoDataGet operation.
     * @callback module:api/DefaultApi~calcPrecoDataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {String} nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param {Number} nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param {String} nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param {String} nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param {String} nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {String} nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param {String} sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {Date} sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrecoDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoDataGet = function(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nVlPeso, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, callback) {
      var postBody = null;

      // verify the required parameter 'nCdEmpresa' is set
      if (nCdEmpresa === undefined || nCdEmpresa === null) {
        throw new Error("Missing the required parameter 'nCdEmpresa' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'sDsSenha' is set
      if (sDsSenha === undefined || sDsSenha === null) {
        throw new Error("Missing the required parameter 'sDsSenha' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'nVlPeso' is set
      if (nVlPeso === undefined || nVlPeso === null) {
        throw new Error("Missing the required parameter 'nVlPeso' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'nCdFormato' is set
      if (nCdFormato === undefined || nCdFormato === null) {
        throw new Error("Missing the required parameter 'nCdFormato' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'nVlComprimento' is set
      if (nVlComprimento === undefined || nVlComprimento === null) {
        throw new Error("Missing the required parameter 'nVlComprimento' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'nVlAltura' is set
      if (nVlAltura === undefined || nVlAltura === null) {
        throw new Error("Missing the required parameter 'nVlAltura' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'nVlLargura' is set
      if (nVlLargura === undefined || nVlLargura === null) {
        throw new Error("Missing the required parameter 'nVlLargura' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'nVlDiametro' is set
      if (nVlDiametro === undefined || nVlDiametro === null) {
        throw new Error("Missing the required parameter 'nVlDiametro' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'sCdMaoPropria' is set
      if (sCdMaoPropria === undefined || sCdMaoPropria === null) {
        throw new Error("Missing the required parameter 'sCdMaoPropria' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'nVlValorDeclarado' is set
      if (nVlValorDeclarado === undefined || nVlValorDeclarado === null) {
        throw new Error("Missing the required parameter 'nVlValorDeclarado' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'sCdAvisoRecebimento' is set
      if (sCdAvisoRecebimento === undefined || sCdAvisoRecebimento === null) {
        throw new Error("Missing the required parameter 'sCdAvisoRecebimento' when calling calcPrecoDataGet");
      }

      // verify the required parameter 'sDtCalculo' is set
      if (sDtCalculo === undefined || sDtCalculo === null) {
        throw new Error("Missing the required parameter 'sDtCalculo' when calling calcPrecoDataGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nCdEmpresa': nCdEmpresa,
        'sDsSenha': sDsSenha,
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'nVlPeso': nVlPeso,
        'nCdFormato': nCdFormato,
        'nVlComprimento': nVlComprimento,
        'nVlAltura': nVlAltura,
        'nVlLargura': nVlLargura,
        'nVlDiametro': nVlDiametro,
        'sCdMaoPropria': sCdMaoPropria,
        'nVlValorDeclarado': nVlValorDeclarado,
        'sCdAvisoRecebimento': sCdAvisoRecebimento,
        'sDtCalculo': sDtCalculo
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrecoData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoDataPost operation.
     * @callback module:api/DefaultApi~calcPrecoDataPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {Number} nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param {String} nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param {String} nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param {String} nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {String} nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param {String} sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {Date} sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param {module:api/DefaultApi~calcPrecoDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoDataPost = function(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdEmpresa' is set
      if (nCdEmpresa === undefined || nCdEmpresa === null) {
        throw new Error("Missing the required parameter 'nCdEmpresa' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'sDsSenha' is set
      if (sDsSenha === undefined || sDsSenha === null) {
        throw new Error("Missing the required parameter 'sDsSenha' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'nCdFormato' is set
      if (nCdFormato === undefined || nCdFormato === null) {
        throw new Error("Missing the required parameter 'nCdFormato' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'nVlComprimento' is set
      if (nVlComprimento === undefined || nVlComprimento === null) {
        throw new Error("Missing the required parameter 'nVlComprimento' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'nVlAltura' is set
      if (nVlAltura === undefined || nVlAltura === null) {
        throw new Error("Missing the required parameter 'nVlAltura' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'nVlLargura' is set
      if (nVlLargura === undefined || nVlLargura === null) {
        throw new Error("Missing the required parameter 'nVlLargura' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'nVlDiametro' is set
      if (nVlDiametro === undefined || nVlDiametro === null) {
        throw new Error("Missing the required parameter 'nVlDiametro' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'sCdMaoPropria' is set
      if (sCdMaoPropria === undefined || sCdMaoPropria === null) {
        throw new Error("Missing the required parameter 'sCdMaoPropria' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'nVlValorDeclarado' is set
      if (nVlValorDeclarado === undefined || nVlValorDeclarado === null) {
        throw new Error("Missing the required parameter 'nVlValorDeclarado' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'sCdAvisoRecebimento' is set
      if (sCdAvisoRecebimento === undefined || sCdAvisoRecebimento === null) {
        throw new Error("Missing the required parameter 'sCdAvisoRecebimento' when calling calcPrecoDataPost");
      }

      // verify the required parameter 'sDtCalculo' is set
      if (sDtCalculo === undefined || sDtCalculo === null) {
        throw new Error("Missing the required parameter 'sDtCalculo' when calling calcPrecoDataPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'sDtCalculo': sDtCalculo
      };
      var headerParams = {
      };
      var formParams = {
        'nCdEmpresa': nCdEmpresa,
        'sDsSenha': sDsSenha,
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'nVlPeso': opts['nVlPeso'],
        'nCdFormato': nCdFormato,
        'nVlComprimento': nVlComprimento,
        'nVlAltura': nVlAltura,
        'nVlLargura': nVlLargura,
        'nVlDiametro': nVlDiametro,
        'sCdMaoPropria': sCdMaoPropria,
        'nVlValorDeclarado': nVlValorDeclarado,
        'sCdAvisoRecebimento': sCdAvisoRecebimento
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrecoData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoFACGet operation.
     * @callback module:api/DefaultApi~calcPrecoFACGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calcula prazo para entrega
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg. 
     * @param {Date} strDataCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrecoFACGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoFACGet = function(nCdServico, nVlPeso, strDataCalculo, callback) {
      var postBody = null;

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoFACGet");
      }

      // verify the required parameter 'nVlPeso' is set
      if (nVlPeso === undefined || nVlPeso === null) {
        throw new Error("Missing the required parameter 'nVlPeso' when calling calcPrecoFACGet");
      }

      // verify the required parameter 'strDataCalculo' is set
      if (strDataCalculo === undefined || strDataCalculo === null) {
        throw new Error("Missing the required parameter 'strDataCalculo' when calling calcPrecoFACGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nCdServico': nCdServico,
        'nVlPeso': nVlPeso,
        'strDataCalculo': strDataCalculo
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrecoFAC', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoFACPost operation.
     * @callback module:api/DefaultApi~calcPrecoFACPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg. 
     * @param {Date} strDataCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrecoFACPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoFACPost = function(nCdServico, nVlPeso, strDataCalculo, callback) {
      var postBody = null;

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoFACPost");
      }

      // verify the required parameter 'nVlPeso' is set
      if (nVlPeso === undefined || nVlPeso === null) {
        throw new Error("Missing the required parameter 'nVlPeso' when calling calcPrecoFACPost");
      }

      // verify the required parameter 'strDataCalculo' is set
      if (strDataCalculo === undefined || strDataCalculo === null) {
        throw new Error("Missing the required parameter 'strDataCalculo' when calling calcPrecoFACPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'nCdServico': nCdServico,
        'nVlPeso': nVlPeso,
        'strDataCalculo': strDataCalculo
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrecoFAC', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoGet operation.
     * @callback module:api/DefaultApi~calcPrecoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {String} nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param {Number} nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param {String} nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param {String} nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param {String} nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {String} nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param {String} sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {module:api/DefaultApi~calcPrecoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoGet = function(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nVlPeso, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, callback) {
      var postBody = null;

      // verify the required parameter 'nCdEmpresa' is set
      if (nCdEmpresa === undefined || nCdEmpresa === null) {
        throw new Error("Missing the required parameter 'nCdEmpresa' when calling calcPrecoGet");
      }

      // verify the required parameter 'sDsSenha' is set
      if (sDsSenha === undefined || sDsSenha === null) {
        throw new Error("Missing the required parameter 'sDsSenha' when calling calcPrecoGet");
      }

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoGet");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrecoGet");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrecoGet");
      }

      // verify the required parameter 'nVlPeso' is set
      if (nVlPeso === undefined || nVlPeso === null) {
        throw new Error("Missing the required parameter 'nVlPeso' when calling calcPrecoGet");
      }

      // verify the required parameter 'nCdFormato' is set
      if (nCdFormato === undefined || nCdFormato === null) {
        throw new Error("Missing the required parameter 'nCdFormato' when calling calcPrecoGet");
      }

      // verify the required parameter 'nVlComprimento' is set
      if (nVlComprimento === undefined || nVlComprimento === null) {
        throw new Error("Missing the required parameter 'nVlComprimento' when calling calcPrecoGet");
      }

      // verify the required parameter 'nVlAltura' is set
      if (nVlAltura === undefined || nVlAltura === null) {
        throw new Error("Missing the required parameter 'nVlAltura' when calling calcPrecoGet");
      }

      // verify the required parameter 'nVlLargura' is set
      if (nVlLargura === undefined || nVlLargura === null) {
        throw new Error("Missing the required parameter 'nVlLargura' when calling calcPrecoGet");
      }

      // verify the required parameter 'nVlDiametro' is set
      if (nVlDiametro === undefined || nVlDiametro === null) {
        throw new Error("Missing the required parameter 'nVlDiametro' when calling calcPrecoGet");
      }

      // verify the required parameter 'sCdMaoPropria' is set
      if (sCdMaoPropria === undefined || sCdMaoPropria === null) {
        throw new Error("Missing the required parameter 'sCdMaoPropria' when calling calcPrecoGet");
      }

      // verify the required parameter 'nVlValorDeclarado' is set
      if (nVlValorDeclarado === undefined || nVlValorDeclarado === null) {
        throw new Error("Missing the required parameter 'nVlValorDeclarado' when calling calcPrecoGet");
      }

      // verify the required parameter 'sCdAvisoRecebimento' is set
      if (sCdAvisoRecebimento === undefined || sCdAvisoRecebimento === null) {
        throw new Error("Missing the required parameter 'sCdAvisoRecebimento' when calling calcPrecoGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nCdEmpresa': nCdEmpresa,
        'sDsSenha': sDsSenha,
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'nVlPeso': nVlPeso,
        'nCdFormato': nCdFormato,
        'nVlComprimento': nVlComprimento,
        'nVlAltura': nVlAltura,
        'nVlLargura': nVlLargura,
        'nVlDiametro': nVlDiametro,
        'sCdMaoPropria': sCdMaoPropria,
        'nVlValorDeclarado': nVlValorDeclarado,
        'sCdAvisoRecebimento': sCdAvisoRecebimento
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPreco', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoPost operation.
     * @callback module:api/DefaultApi~calcPrecoPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {Number} nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param {String} nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param {String} nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param {String} nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {String} nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param {String} sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param {module:api/DefaultApi~calcPrecoPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoPost = function(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdEmpresa' is set
      if (nCdEmpresa === undefined || nCdEmpresa === null) {
        throw new Error("Missing the required parameter 'nCdEmpresa' when calling calcPrecoPost");
      }

      // verify the required parameter 'sDsSenha' is set
      if (sDsSenha === undefined || sDsSenha === null) {
        throw new Error("Missing the required parameter 'sDsSenha' when calling calcPrecoPost");
      }

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoPost");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrecoPost");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrecoPost");
      }

      // verify the required parameter 'nCdFormato' is set
      if (nCdFormato === undefined || nCdFormato === null) {
        throw new Error("Missing the required parameter 'nCdFormato' when calling calcPrecoPost");
      }

      // verify the required parameter 'nVlComprimento' is set
      if (nVlComprimento === undefined || nVlComprimento === null) {
        throw new Error("Missing the required parameter 'nVlComprimento' when calling calcPrecoPost");
      }

      // verify the required parameter 'nVlAltura' is set
      if (nVlAltura === undefined || nVlAltura === null) {
        throw new Error("Missing the required parameter 'nVlAltura' when calling calcPrecoPost");
      }

      // verify the required parameter 'nVlLargura' is set
      if (nVlLargura === undefined || nVlLargura === null) {
        throw new Error("Missing the required parameter 'nVlLargura' when calling calcPrecoPost");
      }

      // verify the required parameter 'nVlDiametro' is set
      if (nVlDiametro === undefined || nVlDiametro === null) {
        throw new Error("Missing the required parameter 'nVlDiametro' when calling calcPrecoPost");
      }

      // verify the required parameter 'sCdMaoPropria' is set
      if (sCdMaoPropria === undefined || sCdMaoPropria === null) {
        throw new Error("Missing the required parameter 'sCdMaoPropria' when calling calcPrecoPost");
      }

      // verify the required parameter 'nVlValorDeclarado' is set
      if (nVlValorDeclarado === undefined || nVlValorDeclarado === null) {
        throw new Error("Missing the required parameter 'nVlValorDeclarado' when calling calcPrecoPost");
      }

      // verify the required parameter 'sCdAvisoRecebimento' is set
      if (sCdAvisoRecebimento === undefined || sCdAvisoRecebimento === null) {
        throw new Error("Missing the required parameter 'sCdAvisoRecebimento' when calling calcPrecoPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'nCdEmpresa': nCdEmpresa,
        'sDsSenha': sDsSenha,
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'nVlPeso': opts['nVlPeso'],
        'nCdFormato': nCdFormato,
        'nVlComprimento': nVlComprimento,
        'nVlAltura': nVlAltura,
        'nVlLargura': nVlLargura,
        'nVlDiametro': nVlDiametro,
        'sCdMaoPropria': sCdMaoPropria,
        'nVlValorDeclarado': nVlValorDeclarado,
        'sCdAvisoRecebimento': sCdAvisoRecebimento
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPreco', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoPrazoDataGet operation.
     * @callback module:api/DefaultApi~calcPrecoPrazoDataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {String} nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param {Number} nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param {String} nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param {String} nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param {String} nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {String} nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param {String} sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {Date} sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrecoPrazoDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoPrazoDataGet = function(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nVlPeso, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, callback) {
      var postBody = null;

      // verify the required parameter 'nCdEmpresa' is set
      if (nCdEmpresa === undefined || nCdEmpresa === null) {
        throw new Error("Missing the required parameter 'nCdEmpresa' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'sDsSenha' is set
      if (sDsSenha === undefined || sDsSenha === null) {
        throw new Error("Missing the required parameter 'sDsSenha' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'nVlPeso' is set
      if (nVlPeso === undefined || nVlPeso === null) {
        throw new Error("Missing the required parameter 'nVlPeso' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'nCdFormato' is set
      if (nCdFormato === undefined || nCdFormato === null) {
        throw new Error("Missing the required parameter 'nCdFormato' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'nVlComprimento' is set
      if (nVlComprimento === undefined || nVlComprimento === null) {
        throw new Error("Missing the required parameter 'nVlComprimento' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'nVlAltura' is set
      if (nVlAltura === undefined || nVlAltura === null) {
        throw new Error("Missing the required parameter 'nVlAltura' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'nVlLargura' is set
      if (nVlLargura === undefined || nVlLargura === null) {
        throw new Error("Missing the required parameter 'nVlLargura' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'nVlDiametro' is set
      if (nVlDiametro === undefined || nVlDiametro === null) {
        throw new Error("Missing the required parameter 'nVlDiametro' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'sCdMaoPropria' is set
      if (sCdMaoPropria === undefined || sCdMaoPropria === null) {
        throw new Error("Missing the required parameter 'sCdMaoPropria' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'nVlValorDeclarado' is set
      if (nVlValorDeclarado === undefined || nVlValorDeclarado === null) {
        throw new Error("Missing the required parameter 'nVlValorDeclarado' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'sCdAvisoRecebimento' is set
      if (sCdAvisoRecebimento === undefined || sCdAvisoRecebimento === null) {
        throw new Error("Missing the required parameter 'sCdAvisoRecebimento' when calling calcPrecoPrazoDataGet");
      }

      // verify the required parameter 'sDtCalculo' is set
      if (sDtCalculo === undefined || sDtCalculo === null) {
        throw new Error("Missing the required parameter 'sDtCalculo' when calling calcPrecoPrazoDataGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nCdEmpresa': nCdEmpresa,
        'sDsSenha': sDsSenha,
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'nVlPeso': nVlPeso,
        'nCdFormato': nCdFormato,
        'nVlComprimento': nVlComprimento,
        'nVlAltura': nVlAltura,
        'nVlLargura': nVlLargura,
        'nVlDiametro': nVlDiametro,
        'sCdMaoPropria': sCdMaoPropria,
        'nVlValorDeclarado': nVlValorDeclarado,
        'sCdAvisoRecebimento': sCdAvisoRecebimento,
        'sDtCalculo': sDtCalculo
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrecoPrazoData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoPrazoDataPost operation.
     * @callback module:api/DefaultApi~calcPrecoPrazoDataPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {Number} nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param {String} nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param {String} nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param {String} nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {String} nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param {String} sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {Date} sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param {module:api/DefaultApi~calcPrecoPrazoDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoPrazoDataPost = function(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdEmpresa' is set
      if (nCdEmpresa === undefined || nCdEmpresa === null) {
        throw new Error("Missing the required parameter 'nCdEmpresa' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'sDsSenha' is set
      if (sDsSenha === undefined || sDsSenha === null) {
        throw new Error("Missing the required parameter 'sDsSenha' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'nCdFormato' is set
      if (nCdFormato === undefined || nCdFormato === null) {
        throw new Error("Missing the required parameter 'nCdFormato' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'nVlComprimento' is set
      if (nVlComprimento === undefined || nVlComprimento === null) {
        throw new Error("Missing the required parameter 'nVlComprimento' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'nVlAltura' is set
      if (nVlAltura === undefined || nVlAltura === null) {
        throw new Error("Missing the required parameter 'nVlAltura' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'nVlLargura' is set
      if (nVlLargura === undefined || nVlLargura === null) {
        throw new Error("Missing the required parameter 'nVlLargura' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'nVlDiametro' is set
      if (nVlDiametro === undefined || nVlDiametro === null) {
        throw new Error("Missing the required parameter 'nVlDiametro' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'sCdMaoPropria' is set
      if (sCdMaoPropria === undefined || sCdMaoPropria === null) {
        throw new Error("Missing the required parameter 'sCdMaoPropria' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'nVlValorDeclarado' is set
      if (nVlValorDeclarado === undefined || nVlValorDeclarado === null) {
        throw new Error("Missing the required parameter 'nVlValorDeclarado' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'sCdAvisoRecebimento' is set
      if (sCdAvisoRecebimento === undefined || sCdAvisoRecebimento === null) {
        throw new Error("Missing the required parameter 'sCdAvisoRecebimento' when calling calcPrecoPrazoDataPost");
      }

      // verify the required parameter 'sDtCalculo' is set
      if (sDtCalculo === undefined || sDtCalculo === null) {
        throw new Error("Missing the required parameter 'sDtCalculo' when calling calcPrecoPrazoDataPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'sDtCalculo': sDtCalculo
      };
      var headerParams = {
      };
      var formParams = {
        'nCdEmpresa': nCdEmpresa,
        'sDsSenha': sDsSenha,
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'nVlPeso': opts['nVlPeso'],
        'nCdFormato': nCdFormato,
        'nVlComprimento': nVlComprimento,
        'nVlAltura': nVlAltura,
        'nVlLargura': nVlLargura,
        'nVlDiametro': nVlDiametro,
        'sCdMaoPropria': sCdMaoPropria,
        'nVlValorDeclarado': nVlValorDeclarado,
        'sCdAvisoRecebimento': sCdAvisoRecebimento
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrecoPrazoData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoPrazoRestricaoGet operation.
     * @callback module:api/DefaultApi~calcPrecoPrazoRestricaoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {String} nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param {Number} nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param {String} nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param {String} nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param {String} nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {String} nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param {String} sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {Date} sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {module:api/DefaultApi~calcPrecoPrazoRestricaoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoPrazoRestricaoGet = function(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nVlPeso, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, callback) {
      var postBody = null;

      // verify the required parameter 'nCdEmpresa' is set
      if (nCdEmpresa === undefined || nCdEmpresa === null) {
        throw new Error("Missing the required parameter 'nCdEmpresa' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'sDsSenha' is set
      if (sDsSenha === undefined || sDsSenha === null) {
        throw new Error("Missing the required parameter 'sDsSenha' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'nVlPeso' is set
      if (nVlPeso === undefined || nVlPeso === null) {
        throw new Error("Missing the required parameter 'nVlPeso' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'nCdFormato' is set
      if (nCdFormato === undefined || nCdFormato === null) {
        throw new Error("Missing the required parameter 'nCdFormato' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'nVlComprimento' is set
      if (nVlComprimento === undefined || nVlComprimento === null) {
        throw new Error("Missing the required parameter 'nVlComprimento' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'nVlAltura' is set
      if (nVlAltura === undefined || nVlAltura === null) {
        throw new Error("Missing the required parameter 'nVlAltura' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'nVlLargura' is set
      if (nVlLargura === undefined || nVlLargura === null) {
        throw new Error("Missing the required parameter 'nVlLargura' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'nVlDiametro' is set
      if (nVlDiametro === undefined || nVlDiametro === null) {
        throw new Error("Missing the required parameter 'nVlDiametro' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'sCdMaoPropria' is set
      if (sCdMaoPropria === undefined || sCdMaoPropria === null) {
        throw new Error("Missing the required parameter 'sCdMaoPropria' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'nVlValorDeclarado' is set
      if (nVlValorDeclarado === undefined || nVlValorDeclarado === null) {
        throw new Error("Missing the required parameter 'nVlValorDeclarado' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'sCdAvisoRecebimento' is set
      if (sCdAvisoRecebimento === undefined || sCdAvisoRecebimento === null) {
        throw new Error("Missing the required parameter 'sCdAvisoRecebimento' when calling calcPrecoPrazoRestricaoGet");
      }

      // verify the required parameter 'sDtCalculo' is set
      if (sDtCalculo === undefined || sDtCalculo === null) {
        throw new Error("Missing the required parameter 'sDtCalculo' when calling calcPrecoPrazoRestricaoGet");
      }


      var pathParams = {
      };
      var queryParams = {
        'nCdEmpresa': nCdEmpresa,
        'sDsSenha': sDsSenha,
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'nVlPeso': nVlPeso,
        'nCdFormato': nCdFormato,
        'nVlComprimento': nVlComprimento,
        'nVlAltura': nVlAltura,
        'nVlLargura': nVlLargura,
        'nVlDiametro': nVlDiametro,
        'sCdMaoPropria': sCdMaoPropria,
        'nVlValorDeclarado': nVlValorDeclarado,
        'sCdAvisoRecebimento': sCdAvisoRecebimento,
        'sDtCalculo': sDtCalculo
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrecoPrazoRestricao', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the calcPrecoPrazoRestricaoPost operation.
     * @callback module:api/DefaultApi~calcPrecoPrazoRestricaoPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param {String} nCdServico | Código |              Serviço                 | |--------|--------------------------------------| | 04014  | SEDEX a Vista                        | | 04065  | SEDEX à vista pagamento na entrega   | | 04510  | PAC à vista                          | | 04707  | PAC à vista pagamento na entrega     | | 40169  | SEDEX 12                             | | 40215  | SEDEX 10 (à vista e a faturar)       | | 40290  | SEDEX Hoje Varejo                    |  ##### Obs:   Pode ser mais de um numa consulta separados por vírgula. 
     * @param {String} sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param {String} sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param {Number} nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param {String} nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param {String} nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param {String} nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param {String} sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {String} nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param {String} sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param {Date} sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param {Object} opts Optional parameters
     * @param {String} opts.nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param {module:api/DefaultApi~calcPrecoPrazoRestricaoPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.calcPrecoPrazoRestricaoPost = function(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'nCdEmpresa' is set
      if (nCdEmpresa === undefined || nCdEmpresa === null) {
        throw new Error("Missing the required parameter 'nCdEmpresa' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'sDsSenha' is set
      if (sDsSenha === undefined || sDsSenha === null) {
        throw new Error("Missing the required parameter 'sDsSenha' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'nCdServico' is set
      if (nCdServico === undefined || nCdServico === null) {
        throw new Error("Missing the required parameter 'nCdServico' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'sCepOrigem' is set
      if (sCepOrigem === undefined || sCepOrigem === null) {
        throw new Error("Missing the required parameter 'sCepOrigem' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'sCepDestino' is set
      if (sCepDestino === undefined || sCepDestino === null) {
        throw new Error("Missing the required parameter 'sCepDestino' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'nCdFormato' is set
      if (nCdFormato === undefined || nCdFormato === null) {
        throw new Error("Missing the required parameter 'nCdFormato' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'nVlComprimento' is set
      if (nVlComprimento === undefined || nVlComprimento === null) {
        throw new Error("Missing the required parameter 'nVlComprimento' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'nVlAltura' is set
      if (nVlAltura === undefined || nVlAltura === null) {
        throw new Error("Missing the required parameter 'nVlAltura' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'nVlLargura' is set
      if (nVlLargura === undefined || nVlLargura === null) {
        throw new Error("Missing the required parameter 'nVlLargura' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'nVlDiametro' is set
      if (nVlDiametro === undefined || nVlDiametro === null) {
        throw new Error("Missing the required parameter 'nVlDiametro' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'sCdMaoPropria' is set
      if (sCdMaoPropria === undefined || sCdMaoPropria === null) {
        throw new Error("Missing the required parameter 'sCdMaoPropria' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'nVlValorDeclarado' is set
      if (nVlValorDeclarado === undefined || nVlValorDeclarado === null) {
        throw new Error("Missing the required parameter 'nVlValorDeclarado' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'sCdAvisoRecebimento' is set
      if (sCdAvisoRecebimento === undefined || sCdAvisoRecebimento === null) {
        throw new Error("Missing the required parameter 'sCdAvisoRecebimento' when calling calcPrecoPrazoRestricaoPost");
      }

      // verify the required parameter 'sDtCalculo' is set
      if (sDtCalculo === undefined || sDtCalculo === null) {
        throw new Error("Missing the required parameter 'sDtCalculo' when calling calcPrecoPrazoRestricaoPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'sDtCalculo': sDtCalculo
      };
      var headerParams = {
      };
      var formParams = {
        'nCdEmpresa': nCdEmpresa,
        'sDsSenha': sDsSenha,
        'nCdServico': nCdServico,
        'sCepOrigem': sCepOrigem,
        'sCepDestino': sCepDestino,
        'nVlPeso': opts['nVlPeso'],
        'nCdFormato': nCdFormato,
        'nVlComprimento': nVlComprimento,
        'nVlAltura': nVlAltura,
        'nVlLargura': nVlLargura,
        'nVlDiametro': nVlDiametro,
        'sCdMaoPropria': sCdMaoPropria,
        'nVlValorDeclarado': nVlValorDeclarado,
        'sCdAvisoRecebimento': sCdAvisoRecebimento
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['text/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CalcPrecoPrazoRestricao', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
