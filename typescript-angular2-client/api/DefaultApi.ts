/**
 * Correios API
 * API para acessar web services dos correios
 *
 * OpenAPI spec version: 0.0.1
 * Contact: amadeu01@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class DefaultApi {
    protected basePath = 'http://ws.correios.com.br/calculador/CalcPrecoPrazo.asmx';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrazoDataGet(nCdServico: string, sCepOrigem: string, sCepDestino: string, sDtCalculo?: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrazoDataGetWithHttpInfo(nCdServico, sCepOrigem, sCepDestino, sDtCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |   ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrazoDataPost(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, sDtCalculo?: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrazoDataPostWithHttpInfo(nCdServico, sCepOrigem, sCepDestino, sDtCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Calcula prazo para entrega
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     */
    public calcPrazoGet(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrazoGetWithHttpInfo(nCdServico, sCepOrigem, sCepDestino, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Calcula prazo para entrega
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     */
    public calcPrazoPost(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrazoPostWithHttpInfo(nCdServico, sCepOrigem, sCepDestino, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrazoRestricaoGet(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, sDtCalculo?: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrazoRestricaoGetWithHttpInfo(nCdServico, sCepOrigem, sCepDestino, sDtCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrazoRestricaoPost(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, sDtCalculo?: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrazoRestricaoPostWithHttpInfo(nCdServico, sCepOrigem, sCepDestino, sDtCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoDataGet(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nVlPeso: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoDataGetWithHttpInfo(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nVlPeso, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     */
    public calcPrecoDataPost(nCdEmpresa: string, sDsSenha: string, sCepOrigem: string, sCepDestino: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, nCdServico?: string, nVlPeso?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoDataPostWithHttpInfo(nCdEmpresa, sDsSenha, sCepOrigem, sCepDestino, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, nCdServico, nVlPeso, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Calcula prazo para entrega
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg. 
     * @param strDataCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoFACGet(nCdServico: string, nVlPeso: string, strDataCalculo: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoFACGetWithHttpInfo(nCdServico, nVlPeso, strDataCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg. 
     * @param strDataCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoFACPost(nCdServico: string, nVlPeso: string, strDataCalculo: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoFACPostWithHttpInfo(nCdServico, nVlPeso, strDataCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     */
    public calcPrecoGet(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nVlPeso: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoGetWithHttpInfo(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nVlPeso, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     */
    public calcPrecoPost(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, nVlPeso?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoPostWithHttpInfo(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, nVlPeso, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoPrazoDataGet(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nVlPeso: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoPrazoDataGetWithHttpInfo(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nVlPeso, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     */
    public calcPrecoPrazoDataPost(nCdEmpresa: string, sDsSenha: string, sCepOrigem: string, sCepDestino: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, nCdServico?: string, nVlPeso?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoPrazoDataPostWithHttpInfo(nCdEmpresa, sDsSenha, sCepOrigem, sCepDestino, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, nCdServico, nVlPeso, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoPrazoRestricaoGet(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nVlPeso: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoPrazoRestricaoGetWithHttpInfo(nCdEmpresa, sDsSenha, nCdServico, sCepOrigem, sCepDestino, nVlPeso, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     */
    public calcPrecoPrazoRestricaoPost(nCdEmpresa: string, sDsSenha: string, sCepOrigem: string, sCepDestino: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, nCdServico?: string, nVlPeso?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.calcPrecoPrazoRestricaoPostWithHttpInfo(nCdEmpresa, sDsSenha, sCepOrigem, sCepDestino, nCdFormato, nVlComprimento, nVlAltura, nVlLargura, nVlDiametro, sCdMaoPropria, nVlValorDeclarado, sCdAvisoRecebimento, sDtCalculo, nCdServico, nVlPeso, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrazoDataGetWithHttpInfo(nCdServico: string, sCepOrigem: string, sCepDestino: string, sDtCalculo?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrazoData`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrazoDataGet.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrazoDataGet.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrazoDataGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (sCepOrigem !== undefined) {
            formParams.set('sCepOrigem', <any>sCepOrigem); 
        }
        if (sCepDestino !== undefined) {
            formParams.set('sCepDestino', <any>sCepDestino); 
        }
        if (sDtCalculo !== undefined) {
            formParams.set('sDtCalculo', <any>sDtCalculo); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |   ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrazoDataPostWithHttpInfo(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, sDtCalculo?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrazoData`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrazoDataPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (sCepOrigem !== undefined) {
            formParams.set('sCepOrigem', <any>sCepOrigem); 
        }
        if (sCepDestino !== undefined) {
            formParams.set('sCepDestino', <any>sCepDestino); 
        }
        if (sDtCalculo !== undefined) {
            formParams.set('sDtCalculo', <any>sDtCalculo); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Calcula prazo para entrega
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     */
    public calcPrazoGetWithHttpInfo(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrazo`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrazoGet.');
        }
        if (nCdServico !== undefined) {
            queryParameters.set('nCdServico', <any>nCdServico);
        }
        if (sCepOrigem !== undefined) {
            queryParameters.set('sCepOrigem', <any>sCepOrigem);
        }
        if (sCepDestino !== undefined) {
            queryParameters.set('sCepDestino', <any>sCepDestino);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Calcula prazo para entrega
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     */
    public calcPrazoPostWithHttpInfo(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrazo`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrazoPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (sCepOrigem !== undefined) {
            formParams.set('sCepOrigem', <any>sCepOrigem); 
        }
        if (sCepDestino !== undefined) {
            formParams.set('sCepDestino', <any>sCepDestino); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrazoRestricaoGetWithHttpInfo(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, sDtCalculo?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrazoRestricao`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrazoRestricaoGet.');
        }
        if (nCdServico !== undefined) {
            queryParameters.set('nCdServico', <any>nCdServico);
        }
        if (sCepOrigem !== undefined) {
            queryParameters.set('sCepOrigem', <any>sCepOrigem);
        }
        if (sCepDestino !== undefined) {
            queryParameters.set('sCepDestino', <any>sCepDestino);
        }
        if (sDtCalculo !== undefined) {
            queryParameters.set('sDtCalculo', <any>sDtCalculo);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:   05311900 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrazoRestricaoPostWithHttpInfo(nCdServico: string, sCepOrigem?: string, sCepDestino?: string, sDtCalculo?: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrazoRestricao`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrazoRestricaoPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (sCepOrigem !== undefined) {
            formParams.set('sCepOrigem', <any>sCepOrigem); 
        }
        if (sCepDestino !== undefined) {
            formParams.set('sCepDestino', <any>sCepDestino); 
        }
        if (sDtCalculo !== undefined) {
            formParams.set('sDtCalculo', <any>sDtCalculo); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoDataGetWithHttpInfo(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nVlPeso: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrecoData`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'nCdEmpresa' is not null or undefined
        if (nCdEmpresa === null || nCdEmpresa === undefined) {
            throw new Error('Required parameter nCdEmpresa was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'sDsSenha' is not null or undefined
        if (sDsSenha === null || sDsSenha === undefined) {
            throw new Error('Required parameter sDsSenha was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'nVlPeso' is not null or undefined
        if (nVlPeso === null || nVlPeso === undefined) {
            throw new Error('Required parameter nVlPeso was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'nCdFormato' is not null or undefined
        if (nCdFormato === null || nCdFormato === undefined) {
            throw new Error('Required parameter nCdFormato was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'nVlComprimento' is not null or undefined
        if (nVlComprimento === null || nVlComprimento === undefined) {
            throw new Error('Required parameter nVlComprimento was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'nVlAltura' is not null or undefined
        if (nVlAltura === null || nVlAltura === undefined) {
            throw new Error('Required parameter nVlAltura was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'nVlLargura' is not null or undefined
        if (nVlLargura === null || nVlLargura === undefined) {
            throw new Error('Required parameter nVlLargura was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'nVlDiametro' is not null or undefined
        if (nVlDiametro === null || nVlDiametro === undefined) {
            throw new Error('Required parameter nVlDiametro was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'sCdMaoPropria' is not null or undefined
        if (sCdMaoPropria === null || sCdMaoPropria === undefined) {
            throw new Error('Required parameter sCdMaoPropria was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'nVlValorDeclarado' is not null or undefined
        if (nVlValorDeclarado === null || nVlValorDeclarado === undefined) {
            throw new Error('Required parameter nVlValorDeclarado was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'sCdAvisoRecebimento' is not null or undefined
        if (sCdAvisoRecebimento === null || sCdAvisoRecebimento === undefined) {
            throw new Error('Required parameter sCdAvisoRecebimento was null or undefined when calling calcPrecoDataGet.');
        }
        // verify required parameter 'sDtCalculo' is not null or undefined
        if (sDtCalculo === null || sDtCalculo === undefined) {
            throw new Error('Required parameter sDtCalculo was null or undefined when calling calcPrecoDataGet.');
        }
        if (nCdEmpresa !== undefined) {
            queryParameters.set('nCdEmpresa', <any>nCdEmpresa);
        }
        if (sDsSenha !== undefined) {
            queryParameters.set('sDsSenha', <any>sDsSenha);
        }
        if (nCdServico !== undefined) {
            queryParameters.set('nCdServico', <any>nCdServico);
        }
        if (sCepOrigem !== undefined) {
            queryParameters.set('sCepOrigem', <any>sCepOrigem);
        }
        if (sCepDestino !== undefined) {
            queryParameters.set('sCepDestino', <any>sCepDestino);
        }
        if (nVlPeso !== undefined) {
            queryParameters.set('nVlPeso', <any>nVlPeso);
        }
        if (nCdFormato !== undefined) {
            queryParameters.set('nCdFormato', <any>nCdFormato);
        }
        if (nVlComprimento !== undefined) {
            queryParameters.set('nVlComprimento', <any>nVlComprimento);
        }
        if (nVlAltura !== undefined) {
            queryParameters.set('nVlAltura', <any>nVlAltura);
        }
        if (nVlLargura !== undefined) {
            queryParameters.set('nVlLargura', <any>nVlLargura);
        }
        if (nVlDiametro !== undefined) {
            queryParameters.set('nVlDiametro', <any>nVlDiametro);
        }
        if (sCdMaoPropria !== undefined) {
            queryParameters.set('sCdMaoPropria', <any>sCdMaoPropria);
        }
        if (nVlValorDeclarado !== undefined) {
            queryParameters.set('nVlValorDeclarado', <any>nVlValorDeclarado);
        }
        if (sCdAvisoRecebimento !== undefined) {
            queryParameters.set('sCdAvisoRecebimento', <any>sCdAvisoRecebimento);
        }
        if (sDtCalculo !== undefined) {
            queryParameters.set('sDtCalculo', <any>sDtCalculo);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     */
    public calcPrecoDataPostWithHttpInfo(nCdEmpresa: string, sDsSenha: string, sCepOrigem: string, sCepDestino: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, nCdServico?: string, nVlPeso?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrecoData`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdEmpresa' is not null or undefined
        if (nCdEmpresa === null || nCdEmpresa === undefined) {
            throw new Error('Required parameter nCdEmpresa was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'sDsSenha' is not null or undefined
        if (sDsSenha === null || sDsSenha === undefined) {
            throw new Error('Required parameter sDsSenha was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'nCdFormato' is not null or undefined
        if (nCdFormato === null || nCdFormato === undefined) {
            throw new Error('Required parameter nCdFormato was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'nVlComprimento' is not null or undefined
        if (nVlComprimento === null || nVlComprimento === undefined) {
            throw new Error('Required parameter nVlComprimento was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'nVlAltura' is not null or undefined
        if (nVlAltura === null || nVlAltura === undefined) {
            throw new Error('Required parameter nVlAltura was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'nVlLargura' is not null or undefined
        if (nVlLargura === null || nVlLargura === undefined) {
            throw new Error('Required parameter nVlLargura was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'nVlDiametro' is not null or undefined
        if (nVlDiametro === null || nVlDiametro === undefined) {
            throw new Error('Required parameter nVlDiametro was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'sCdMaoPropria' is not null or undefined
        if (sCdMaoPropria === null || sCdMaoPropria === undefined) {
            throw new Error('Required parameter sCdMaoPropria was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'nVlValorDeclarado' is not null or undefined
        if (nVlValorDeclarado === null || nVlValorDeclarado === undefined) {
            throw new Error('Required parameter nVlValorDeclarado was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'sCdAvisoRecebimento' is not null or undefined
        if (sCdAvisoRecebimento === null || sCdAvisoRecebimento === undefined) {
            throw new Error('Required parameter sCdAvisoRecebimento was null or undefined when calling calcPrecoDataPost.');
        }
        // verify required parameter 'sDtCalculo' is not null or undefined
        if (sDtCalculo === null || sDtCalculo === undefined) {
            throw new Error('Required parameter sDtCalculo was null or undefined when calling calcPrecoDataPost.');
        }
        if (sDtCalculo !== undefined) {
            queryParameters.set('sDtCalculo', <any>sDtCalculo);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdEmpresa !== undefined) {
            formParams.set('nCdEmpresa', <any>nCdEmpresa); 
        }
        if (sDsSenha !== undefined) {
            formParams.set('sDsSenha', <any>sDsSenha); 
        }
        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (sCepOrigem !== undefined) {
            formParams.set('sCepOrigem', <any>sCepOrigem); 
        }
        if (sCepDestino !== undefined) {
            formParams.set('sCepDestino', <any>sCepDestino); 
        }
        if (nVlPeso !== undefined) {
            formParams.set('nVlPeso', <any>nVlPeso); 
        }
        if (nCdFormato !== undefined) {
            formParams.set('nCdFormato', <any>nCdFormato); 
        }
        if (nVlComprimento !== undefined) {
            formParams.set('nVlComprimento', <any>nVlComprimento); 
        }
        if (nVlAltura !== undefined) {
            formParams.set('nVlAltura', <any>nVlAltura); 
        }
        if (nVlLargura !== undefined) {
            formParams.set('nVlLargura', <any>nVlLargura); 
        }
        if (nVlDiametro !== undefined) {
            formParams.set('nVlDiametro', <any>nVlDiametro); 
        }
        if (sCdMaoPropria !== undefined) {
            formParams.set('sCdMaoPropria', <any>sCdMaoPropria); 
        }
        if (nVlValorDeclarado !== undefined) {
            formParams.set('nVlValorDeclarado', <any>nVlValorDeclarado); 
        }
        if (sCdAvisoRecebimento !== undefined) {
            formParams.set('sCdAvisoRecebimento', <any>sCdAvisoRecebimento); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Calcula prazo para entrega
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg. 
     * @param strDataCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoFACGetWithHttpInfo(nCdServico: string, nVlPeso: string, strDataCalculo: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrecoFAC`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrecoFACGet.');
        }
        // verify required parameter 'nVlPeso' is not null or undefined
        if (nVlPeso === null || nVlPeso === undefined) {
            throw new Error('Required parameter nVlPeso was null or undefined when calling calcPrecoFACGet.');
        }
        // verify required parameter 'strDataCalculo' is not null or undefined
        if (strDataCalculo === null || strDataCalculo === undefined) {
            throw new Error('Required parameter strDataCalculo was null or undefined when calling calcPrecoFACGet.');
        }
        if (nCdServico !== undefined) {
            queryParameters.set('nCdServico', <any>nCdServico);
        }
        if (nVlPeso !== undefined) {
            queryParameters.set('nVlPeso', <any>nVlPeso);
        }
        if (strDataCalculo !== undefined) {
            queryParameters.set('strDataCalculo', <any>strDataCalculo);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg. 
     * @param strDataCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoFACPostWithHttpInfo(nCdServico: string, nVlPeso: string, strDataCalculo: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrecoFAC`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrecoFACPost.');
        }
        // verify required parameter 'nVlPeso' is not null or undefined
        if (nVlPeso === null || nVlPeso === undefined) {
            throw new Error('Required parameter nVlPeso was null or undefined when calling calcPrecoFACPost.');
        }
        // verify required parameter 'strDataCalculo' is not null or undefined
        if (strDataCalculo === null || strDataCalculo === undefined) {
            throw new Error('Required parameter strDataCalculo was null or undefined when calling calcPrecoFACPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (nVlPeso !== undefined) {
            formParams.set('nVlPeso', <any>nVlPeso); 
        }
        if (strDataCalculo !== undefined) {
            formParams.set('strDataCalculo', <any>strDataCalculo); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     */
    public calcPrecoGetWithHttpInfo(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nVlPeso: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPreco`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'nCdEmpresa' is not null or undefined
        if (nCdEmpresa === null || nCdEmpresa === undefined) {
            throw new Error('Required parameter nCdEmpresa was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'sDsSenha' is not null or undefined
        if (sDsSenha === null || sDsSenha === undefined) {
            throw new Error('Required parameter sDsSenha was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'nVlPeso' is not null or undefined
        if (nVlPeso === null || nVlPeso === undefined) {
            throw new Error('Required parameter nVlPeso was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'nCdFormato' is not null or undefined
        if (nCdFormato === null || nCdFormato === undefined) {
            throw new Error('Required parameter nCdFormato was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'nVlComprimento' is not null or undefined
        if (nVlComprimento === null || nVlComprimento === undefined) {
            throw new Error('Required parameter nVlComprimento was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'nVlAltura' is not null or undefined
        if (nVlAltura === null || nVlAltura === undefined) {
            throw new Error('Required parameter nVlAltura was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'nVlLargura' is not null or undefined
        if (nVlLargura === null || nVlLargura === undefined) {
            throw new Error('Required parameter nVlLargura was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'nVlDiametro' is not null or undefined
        if (nVlDiametro === null || nVlDiametro === undefined) {
            throw new Error('Required parameter nVlDiametro was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'sCdMaoPropria' is not null or undefined
        if (sCdMaoPropria === null || sCdMaoPropria === undefined) {
            throw new Error('Required parameter sCdMaoPropria was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'nVlValorDeclarado' is not null or undefined
        if (nVlValorDeclarado === null || nVlValorDeclarado === undefined) {
            throw new Error('Required parameter nVlValorDeclarado was null or undefined when calling calcPrecoGet.');
        }
        // verify required parameter 'sCdAvisoRecebimento' is not null or undefined
        if (sCdAvisoRecebimento === null || sCdAvisoRecebimento === undefined) {
            throw new Error('Required parameter sCdAvisoRecebimento was null or undefined when calling calcPrecoGet.');
        }
        if (nCdEmpresa !== undefined) {
            queryParameters.set('nCdEmpresa', <any>nCdEmpresa);
        }
        if (sDsSenha !== undefined) {
            queryParameters.set('sDsSenha', <any>sDsSenha);
        }
        if (nCdServico !== undefined) {
            queryParameters.set('nCdServico', <any>nCdServico);
        }
        if (sCepOrigem !== undefined) {
            queryParameters.set('sCepOrigem', <any>sCepOrigem);
        }
        if (sCepDestino !== undefined) {
            queryParameters.set('sCepDestino', <any>sCepDestino);
        }
        if (nVlPeso !== undefined) {
            queryParameters.set('nVlPeso', <any>nVlPeso);
        }
        if (nCdFormato !== undefined) {
            queryParameters.set('nCdFormato', <any>nCdFormato);
        }
        if (nVlComprimento !== undefined) {
            queryParameters.set('nVlComprimento', <any>nVlComprimento);
        }
        if (nVlAltura !== undefined) {
            queryParameters.set('nVlAltura', <any>nVlAltura);
        }
        if (nVlLargura !== undefined) {
            queryParameters.set('nVlLargura', <any>nVlLargura);
        }
        if (nVlDiametro !== undefined) {
            queryParameters.set('nVlDiametro', <any>nVlDiametro);
        }
        if (sCdMaoPropria !== undefined) {
            queryParameters.set('sCdMaoPropria', <any>sCdMaoPropria);
        }
        if (nVlValorDeclarado !== undefined) {
            queryParameters.set('nVlValorDeclarado', <any>nVlValorDeclarado);
        }
        if (sCdAvisoRecebimento !== undefined) {
            queryParameters.set('sCdAvisoRecebimento', <any>sCdAvisoRecebimento);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     */
    public calcPrecoPostWithHttpInfo(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, nVlPeso?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPreco`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdEmpresa' is not null or undefined
        if (nCdEmpresa === null || nCdEmpresa === undefined) {
            throw new Error('Required parameter nCdEmpresa was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'sDsSenha' is not null or undefined
        if (sDsSenha === null || sDsSenha === undefined) {
            throw new Error('Required parameter sDsSenha was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'nCdFormato' is not null or undefined
        if (nCdFormato === null || nCdFormato === undefined) {
            throw new Error('Required parameter nCdFormato was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'nVlComprimento' is not null or undefined
        if (nVlComprimento === null || nVlComprimento === undefined) {
            throw new Error('Required parameter nVlComprimento was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'nVlAltura' is not null or undefined
        if (nVlAltura === null || nVlAltura === undefined) {
            throw new Error('Required parameter nVlAltura was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'nVlLargura' is not null or undefined
        if (nVlLargura === null || nVlLargura === undefined) {
            throw new Error('Required parameter nVlLargura was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'nVlDiametro' is not null or undefined
        if (nVlDiametro === null || nVlDiametro === undefined) {
            throw new Error('Required parameter nVlDiametro was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'sCdMaoPropria' is not null or undefined
        if (sCdMaoPropria === null || sCdMaoPropria === undefined) {
            throw new Error('Required parameter sCdMaoPropria was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'nVlValorDeclarado' is not null or undefined
        if (nVlValorDeclarado === null || nVlValorDeclarado === undefined) {
            throw new Error('Required parameter nVlValorDeclarado was null or undefined when calling calcPrecoPost.');
        }
        // verify required parameter 'sCdAvisoRecebimento' is not null or undefined
        if (sCdAvisoRecebimento === null || sCdAvisoRecebimento === undefined) {
            throw new Error('Required parameter sCdAvisoRecebimento was null or undefined when calling calcPrecoPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdEmpresa !== undefined) {
            formParams.set('nCdEmpresa', <any>nCdEmpresa); 
        }
        if (sDsSenha !== undefined) {
            formParams.set('sDsSenha', <any>sDsSenha); 
        }
        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (sCepOrigem !== undefined) {
            formParams.set('sCepOrigem', <any>sCepOrigem); 
        }
        if (sCepDestino !== undefined) {
            formParams.set('sCepDestino', <any>sCepDestino); 
        }
        if (nVlPeso !== undefined) {
            formParams.set('nVlPeso', <any>nVlPeso); 
        }
        if (nCdFormato !== undefined) {
            formParams.set('nCdFormato', <any>nCdFormato); 
        }
        if (nVlComprimento !== undefined) {
            formParams.set('nVlComprimento', <any>nVlComprimento); 
        }
        if (nVlAltura !== undefined) {
            formParams.set('nVlAltura', <any>nVlAltura); 
        }
        if (nVlLargura !== undefined) {
            formParams.set('nVlLargura', <any>nVlLargura); 
        }
        if (nVlDiametro !== undefined) {
            formParams.set('nVlDiametro', <any>nVlDiametro); 
        }
        if (sCdMaoPropria !== undefined) {
            formParams.set('sCdMaoPropria', <any>sCdMaoPropria); 
        }
        if (nVlValorDeclarado !== undefined) {
            formParams.set('nVlValorDeclarado', <any>nVlValorDeclarado); 
        }
        if (sCdAvisoRecebimento !== undefined) {
            formParams.set('sCdAvisoRecebimento', <any>sCdAvisoRecebimento); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoPrazoDataGetWithHttpInfo(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nVlPeso: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrecoPrazoData`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'nCdEmpresa' is not null or undefined
        if (nCdEmpresa === null || nCdEmpresa === undefined) {
            throw new Error('Required parameter nCdEmpresa was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'sDsSenha' is not null or undefined
        if (sDsSenha === null || sDsSenha === undefined) {
            throw new Error('Required parameter sDsSenha was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'nVlPeso' is not null or undefined
        if (nVlPeso === null || nVlPeso === undefined) {
            throw new Error('Required parameter nVlPeso was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'nCdFormato' is not null or undefined
        if (nCdFormato === null || nCdFormato === undefined) {
            throw new Error('Required parameter nCdFormato was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'nVlComprimento' is not null or undefined
        if (nVlComprimento === null || nVlComprimento === undefined) {
            throw new Error('Required parameter nVlComprimento was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'nVlAltura' is not null or undefined
        if (nVlAltura === null || nVlAltura === undefined) {
            throw new Error('Required parameter nVlAltura was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'nVlLargura' is not null or undefined
        if (nVlLargura === null || nVlLargura === undefined) {
            throw new Error('Required parameter nVlLargura was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'nVlDiametro' is not null or undefined
        if (nVlDiametro === null || nVlDiametro === undefined) {
            throw new Error('Required parameter nVlDiametro was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'sCdMaoPropria' is not null or undefined
        if (sCdMaoPropria === null || sCdMaoPropria === undefined) {
            throw new Error('Required parameter sCdMaoPropria was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'nVlValorDeclarado' is not null or undefined
        if (nVlValorDeclarado === null || nVlValorDeclarado === undefined) {
            throw new Error('Required parameter nVlValorDeclarado was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'sCdAvisoRecebimento' is not null or undefined
        if (sCdAvisoRecebimento === null || sCdAvisoRecebimento === undefined) {
            throw new Error('Required parameter sCdAvisoRecebimento was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        // verify required parameter 'sDtCalculo' is not null or undefined
        if (sDtCalculo === null || sDtCalculo === undefined) {
            throw new Error('Required parameter sDtCalculo was null or undefined when calling calcPrecoPrazoDataGet.');
        }
        if (nCdEmpresa !== undefined) {
            queryParameters.set('nCdEmpresa', <any>nCdEmpresa);
        }
        if (sDsSenha !== undefined) {
            queryParameters.set('sDsSenha', <any>sDsSenha);
        }
        if (nCdServico !== undefined) {
            queryParameters.set('nCdServico', <any>nCdServico);
        }
        if (sCepOrigem !== undefined) {
            queryParameters.set('sCepOrigem', <any>sCepOrigem);
        }
        if (sCepDestino !== undefined) {
            queryParameters.set('sCepDestino', <any>sCepDestino);
        }
        if (nVlPeso !== undefined) {
            queryParameters.set('nVlPeso', <any>nVlPeso);
        }
        if (nCdFormato !== undefined) {
            queryParameters.set('nCdFormato', <any>nCdFormato);
        }
        if (nVlComprimento !== undefined) {
            queryParameters.set('nVlComprimento', <any>nVlComprimento);
        }
        if (nVlAltura !== undefined) {
            queryParameters.set('nVlAltura', <any>nVlAltura);
        }
        if (nVlLargura !== undefined) {
            queryParameters.set('nVlLargura', <any>nVlLargura);
        }
        if (nVlDiametro !== undefined) {
            queryParameters.set('nVlDiametro', <any>nVlDiametro);
        }
        if (sCdMaoPropria !== undefined) {
            queryParameters.set('sCdMaoPropria', <any>sCdMaoPropria);
        }
        if (nVlValorDeclarado !== undefined) {
            queryParameters.set('nVlValorDeclarado', <any>nVlValorDeclarado);
        }
        if (sCdAvisoRecebimento !== undefined) {
            queryParameters.set('sCdAvisoRecebimento', <any>sCdAvisoRecebimento);
        }
        if (sDtCalculo !== undefined) {
            queryParameters.set('sDtCalculo', <any>sDtCalculo);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     */
    public calcPrecoPrazoDataPostWithHttpInfo(nCdEmpresa: string, sDsSenha: string, sCepOrigem: string, sCepDestino: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, nCdServico?: string, nVlPeso?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrecoPrazoData`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdEmpresa' is not null or undefined
        if (nCdEmpresa === null || nCdEmpresa === undefined) {
            throw new Error('Required parameter nCdEmpresa was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'sDsSenha' is not null or undefined
        if (sDsSenha === null || sDsSenha === undefined) {
            throw new Error('Required parameter sDsSenha was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'nCdFormato' is not null or undefined
        if (nCdFormato === null || nCdFormato === undefined) {
            throw new Error('Required parameter nCdFormato was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'nVlComprimento' is not null or undefined
        if (nVlComprimento === null || nVlComprimento === undefined) {
            throw new Error('Required parameter nVlComprimento was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'nVlAltura' is not null or undefined
        if (nVlAltura === null || nVlAltura === undefined) {
            throw new Error('Required parameter nVlAltura was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'nVlLargura' is not null or undefined
        if (nVlLargura === null || nVlLargura === undefined) {
            throw new Error('Required parameter nVlLargura was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'nVlDiametro' is not null or undefined
        if (nVlDiametro === null || nVlDiametro === undefined) {
            throw new Error('Required parameter nVlDiametro was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'sCdMaoPropria' is not null or undefined
        if (sCdMaoPropria === null || sCdMaoPropria === undefined) {
            throw new Error('Required parameter sCdMaoPropria was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'nVlValorDeclarado' is not null or undefined
        if (nVlValorDeclarado === null || nVlValorDeclarado === undefined) {
            throw new Error('Required parameter nVlValorDeclarado was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'sCdAvisoRecebimento' is not null or undefined
        if (sCdAvisoRecebimento === null || sCdAvisoRecebimento === undefined) {
            throw new Error('Required parameter sCdAvisoRecebimento was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        // verify required parameter 'sDtCalculo' is not null or undefined
        if (sDtCalculo === null || sDtCalculo === undefined) {
            throw new Error('Required parameter sDtCalculo was null or undefined when calling calcPrecoPrazoDataPost.');
        }
        if (sDtCalculo !== undefined) {
            queryParameters.set('sDtCalculo', <any>sDtCalculo);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdEmpresa !== undefined) {
            formParams.set('nCdEmpresa', <any>nCdEmpresa); 
        }
        if (sDsSenha !== undefined) {
            formParams.set('sDsSenha', <any>sDsSenha); 
        }
        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (sCepOrigem !== undefined) {
            formParams.set('sCepOrigem', <any>sCepOrigem); 
        }
        if (sCepDestino !== undefined) {
            formParams.set('sCepDestino', <any>sCepDestino); 
        }
        if (nVlPeso !== undefined) {
            formParams.set('nVlPeso', <any>nVlPeso); 
        }
        if (nCdFormato !== undefined) {
            formParams.set('nCdFormato', <any>nCdFormato); 
        }
        if (nVlComprimento !== undefined) {
            formParams.set('nVlComprimento', <any>nVlComprimento); 
        }
        if (nVlAltura !== undefined) {
            formParams.set('nVlAltura', <any>nVlAltura); 
        }
        if (nVlLargura !== undefined) {
            formParams.set('nVlLargura', <any>nVlLargura); 
        }
        if (nVlDiametro !== undefined) {
            formParams.set('nVlDiametro', <any>nVlDiametro); 
        }
        if (sCdMaoPropria !== undefined) {
            formParams.set('sCdMaoPropria', <any>sCdMaoPropria); 
        }
        if (nVlValorDeclarado !== undefined) {
            formParams.set('nVlValorDeclarado', <any>nVlValorDeclarado); 
        }
        if (sCdAvisoRecebimento !== undefined) {
            formParams.set('sCdAvisoRecebimento', <any>sCdAvisoRecebimento); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            |  ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     */
    public calcPrecoPrazoRestricaoGetWithHttpInfo(nCdEmpresa: string, sDsSenha: string, nCdServico: string, sCepOrigem: string, sCepDestino: string, nVlPeso: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrecoPrazoRestricao`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'nCdEmpresa' is not null or undefined
        if (nCdEmpresa === null || nCdEmpresa === undefined) {
            throw new Error('Required parameter nCdEmpresa was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'sDsSenha' is not null or undefined
        if (sDsSenha === null || sDsSenha === undefined) {
            throw new Error('Required parameter sDsSenha was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'nCdServico' is not null or undefined
        if (nCdServico === null || nCdServico === undefined) {
            throw new Error('Required parameter nCdServico was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'nVlPeso' is not null or undefined
        if (nVlPeso === null || nVlPeso === undefined) {
            throw new Error('Required parameter nVlPeso was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'nCdFormato' is not null or undefined
        if (nCdFormato === null || nCdFormato === undefined) {
            throw new Error('Required parameter nCdFormato was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'nVlComprimento' is not null or undefined
        if (nVlComprimento === null || nVlComprimento === undefined) {
            throw new Error('Required parameter nVlComprimento was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'nVlAltura' is not null or undefined
        if (nVlAltura === null || nVlAltura === undefined) {
            throw new Error('Required parameter nVlAltura was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'nVlLargura' is not null or undefined
        if (nVlLargura === null || nVlLargura === undefined) {
            throw new Error('Required parameter nVlLargura was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'nVlDiametro' is not null or undefined
        if (nVlDiametro === null || nVlDiametro === undefined) {
            throw new Error('Required parameter nVlDiametro was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'sCdMaoPropria' is not null or undefined
        if (sCdMaoPropria === null || sCdMaoPropria === undefined) {
            throw new Error('Required parameter sCdMaoPropria was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'nVlValorDeclarado' is not null or undefined
        if (nVlValorDeclarado === null || nVlValorDeclarado === undefined) {
            throw new Error('Required parameter nVlValorDeclarado was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'sCdAvisoRecebimento' is not null or undefined
        if (sCdAvisoRecebimento === null || sCdAvisoRecebimento === undefined) {
            throw new Error('Required parameter sCdAvisoRecebimento was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        // verify required parameter 'sDtCalculo' is not null or undefined
        if (sDtCalculo === null || sDtCalculo === undefined) {
            throw new Error('Required parameter sDtCalculo was null or undefined when calling calcPrecoPrazoRestricaoGet.');
        }
        if (nCdEmpresa !== undefined) {
            queryParameters.set('nCdEmpresa', <any>nCdEmpresa);
        }
        if (sDsSenha !== undefined) {
            queryParameters.set('sDsSenha', <any>sDsSenha);
        }
        if (nCdServico !== undefined) {
            queryParameters.set('nCdServico', <any>nCdServico);
        }
        if (sCepOrigem !== undefined) {
            queryParameters.set('sCepOrigem', <any>sCepOrigem);
        }
        if (sCepDestino !== undefined) {
            queryParameters.set('sCepDestino', <any>sCepDestino);
        }
        if (nVlPeso !== undefined) {
            queryParameters.set('nVlPeso', <any>nVlPeso);
        }
        if (nCdFormato !== undefined) {
            queryParameters.set('nCdFormato', <any>nCdFormato);
        }
        if (nVlComprimento !== undefined) {
            queryParameters.set('nVlComprimento', <any>nVlComprimento);
        }
        if (nVlAltura !== undefined) {
            queryParameters.set('nVlAltura', <any>nVlAltura);
        }
        if (nVlLargura !== undefined) {
            queryParameters.set('nVlLargura', <any>nVlLargura);
        }
        if (nVlDiametro !== undefined) {
            queryParameters.set('nVlDiametro', <any>nVlDiametro);
        }
        if (sCdMaoPropria !== undefined) {
            queryParameters.set('sCdMaoPropria', <any>sCdMaoPropria);
        }
        if (nVlValorDeclarado !== undefined) {
            queryParameters.set('nVlValorDeclarado', <any>nVlValorDeclarado);
        }
        if (sCdAvisoRecebimento !== undefined) {
            queryParameters.set('sCdAvisoRecebimento', <any>sCdAvisoRecebimento);
        }
        if (sDtCalculo !== undefined) {
            queryParameters.set('sDtCalculo', <any>sDtCalculo);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * 
     * @param nCdEmpresa Seu código administrativo junto à ECT. O código está disponível no corpo do contrato firmado com os Correios. ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sDsSenha Senha para acesso ao serviço, associada ao seu código administrativo. A senha inicial corresponde aos 8 primeiros dígitos do CNPJ informado no contrato. A qualquer momento, é possível alterar a senha no endereço  ##### Obs:   O parâmetro tem que ser passado mesmo vazio. 
     * @param sCepOrigem CEP de origem hífen. Ex:   88102080 
     * @param sCepDestino CEP de destino sem hífen. Ex:    05311900 
     * @param nCdFormato Formato da encomenda (incluindo embalagem). Valores possíveis:   1. Formato caixa/pacote   2. Formato rolo/prisma   3. Envelope 
     * @param nVlComprimento Comprimento da encomenda (incluindo embalagem), em *centímetros* 
     * @param nVlAltura Altura da encomenda (incluindo embalagem), em *centímetros*. Se o formato for envelope, informar zero (0). 
     * @param nVlLargura Largura da encomenda (incluindo embalagem), em *centímetros*. 
     * @param nVlDiametro Diâmetro da encomenda (incluindo embalagem), em *centímetros*. 
     * @param sCdMaoPropria \&quot;Indica se a encomenda será entregue com o serviço adicional mão própria. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param nVlValorDeclarado Indica se a encomenda será entregue com o serviço adicional valor declarado. Neste campo deve ser apresentado o valor declarado desejado, em Reais 
     * @param sCdAvisoRecebimento \&quot;Indica se a encomenda será entregue com o serviço adicional aviso de recebimento. Valores possíveis: S ou N (S – Sim, N – Não)\&quot; 
     * @param sDtCalculo Data tipo dd/mm/aaaa. Ex:    21/10/2017 
     * @param nCdServico | Código | Serviço               | |--------|-----------------------| | 40010  | SEDEX Varejo          | | 40045  | SEDEX a Cobrar Varejo | | 40215  | SEDEX 10 Varejo       | | 40290  | SEDEX Hoje Varejo     | | 41106  | PAC Varejo            | ##### Obs:    Pode ser mais de um numa consulta separados por vírgula. 
     * @param nVlPeso Peso da encomenda, incluindo sua embalagem. O peso deve ser informado em quilogramas. Se o formato for Envelope, o valor máximo permitido será 1 kg 
     */
    public calcPrecoPrazoRestricaoPostWithHttpInfo(nCdEmpresa: string, sDsSenha: string, sCepOrigem: string, sCepDestino: string, nCdFormato: number, nVlComprimento: string, nVlAltura: string, nVlLargura: string, nVlDiametro: string, sCdMaoPropria: string, nVlValorDeclarado: string, sCdAvisoRecebimento: string, sDtCalculo: Date, nCdServico?: string, nVlPeso?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/CalcPrecoPrazoRestricao`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'nCdEmpresa' is not null or undefined
        if (nCdEmpresa === null || nCdEmpresa === undefined) {
            throw new Error('Required parameter nCdEmpresa was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'sDsSenha' is not null or undefined
        if (sDsSenha === null || sDsSenha === undefined) {
            throw new Error('Required parameter sDsSenha was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'sCepOrigem' is not null or undefined
        if (sCepOrigem === null || sCepOrigem === undefined) {
            throw new Error('Required parameter sCepOrigem was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'sCepDestino' is not null or undefined
        if (sCepDestino === null || sCepDestino === undefined) {
            throw new Error('Required parameter sCepDestino was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'nCdFormato' is not null or undefined
        if (nCdFormato === null || nCdFormato === undefined) {
            throw new Error('Required parameter nCdFormato was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'nVlComprimento' is not null or undefined
        if (nVlComprimento === null || nVlComprimento === undefined) {
            throw new Error('Required parameter nVlComprimento was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'nVlAltura' is not null or undefined
        if (nVlAltura === null || nVlAltura === undefined) {
            throw new Error('Required parameter nVlAltura was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'nVlLargura' is not null or undefined
        if (nVlLargura === null || nVlLargura === undefined) {
            throw new Error('Required parameter nVlLargura was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'nVlDiametro' is not null or undefined
        if (nVlDiametro === null || nVlDiametro === undefined) {
            throw new Error('Required parameter nVlDiametro was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'sCdMaoPropria' is not null or undefined
        if (sCdMaoPropria === null || sCdMaoPropria === undefined) {
            throw new Error('Required parameter sCdMaoPropria was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'nVlValorDeclarado' is not null or undefined
        if (nVlValorDeclarado === null || nVlValorDeclarado === undefined) {
            throw new Error('Required parameter nVlValorDeclarado was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'sCdAvisoRecebimento' is not null or undefined
        if (sCdAvisoRecebimento === null || sCdAvisoRecebimento === undefined) {
            throw new Error('Required parameter sCdAvisoRecebimento was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        // verify required parameter 'sDtCalculo' is not null or undefined
        if (sDtCalculo === null || sDtCalculo === undefined) {
            throw new Error('Required parameter sDtCalculo was null or undefined when calling calcPrecoPrazoRestricaoPost.');
        }
        if (sDtCalculo !== undefined) {
            queryParameters.set('sDtCalculo', <any>sDtCalculo);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (nCdEmpresa !== undefined) {
            formParams.set('nCdEmpresa', <any>nCdEmpresa); 
        }
        if (sDsSenha !== undefined) {
            formParams.set('sDsSenha', <any>sDsSenha); 
        }
        if (nCdServico !== undefined) {
            formParams.set('nCdServico', <any>nCdServico); 
        }
        if (sCepOrigem !== undefined) {
            formParams.set('sCepOrigem', <any>sCepOrigem); 
        }
        if (sCepDestino !== undefined) {
            formParams.set('sCepDestino', <any>sCepDestino); 
        }
        if (nVlPeso !== undefined) {
            formParams.set('nVlPeso', <any>nVlPeso); 
        }
        if (nCdFormato !== undefined) {
            formParams.set('nCdFormato', <any>nCdFormato); 
        }
        if (nVlComprimento !== undefined) {
            formParams.set('nVlComprimento', <any>nVlComprimento); 
        }
        if (nVlAltura !== undefined) {
            formParams.set('nVlAltura', <any>nVlAltura); 
        }
        if (nVlLargura !== undefined) {
            formParams.set('nVlLargura', <any>nVlLargura); 
        }
        if (nVlDiametro !== undefined) {
            formParams.set('nVlDiametro', <any>nVlDiametro); 
        }
        if (sCdMaoPropria !== undefined) {
            formParams.set('sCdMaoPropria', <any>sCdMaoPropria); 
        }
        if (nVlValorDeclarado !== undefined) {
            formParams.set('nVlValorDeclarado', <any>nVlValorDeclarado); 
        }
        if (sCdAvisoRecebimento !== undefined) {
            formParams.set('sCdAvisoRecebimento', <any>sCdAvisoRecebimento); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
